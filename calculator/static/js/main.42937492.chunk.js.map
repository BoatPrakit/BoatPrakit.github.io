{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","value","Screen","this","beforeCalculate","result","React","Component","ButtonPad","renderButton","Calculator","state","isClear","handleClick","bind","mathRegex","mathEndRegex","currentNumber","toLowerCase","setState","slice","length","test","alert","eval","replace","ReactDOM","render","document","getElementById"],"mappings":"w+CAIA,SAASA,OAAOC,GACd,OACA,qEAAQC,UAAU,SAASC,QAASF,EAAME,SAA1C,IAAqDF,EAAMG,O,IAGvDC,O,2pBAEF,OACE,kEAAKH,UAAU,UACb,8EAAWI,KAAKL,MAAMM,iBACtB,4EAASD,KAAKL,MAAMO,a,GALPC,6CAAMC,WAUrBC,U,+pBACUP,GAAQ,IAAD,OACnB,OACE,2DAACJ,OAAD,CACGI,MAAOA,EACPD,QAAS,kBAAI,EAAKF,MAAME,QAAQC,Q,+BAKrC,OACE,kEAAKF,UAAU,cACb,kEAAKA,UAAU,SACb,kEAAKA,UAAU,gBACZI,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,MAErB,kEAAKV,UAAU,SACZI,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,MAErB,kEAAKV,UAAU,SACZI,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,MAErB,kEAAKV,UAAU,SACZI,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,KAClBN,KAAKM,aAAa,OAGrB,kEAAKV,UAAU,e,GAtCDO,6CAAMC,WA4CxBG,W,iWACJ,oBAAYZ,GAAO,IAAD,uKAChB,oBAAMA,IACDa,MAAQ,CACXP,gBAAkB,GAClBQ,SAAU,EACVP,OAAS,GAEX,EAAKQ,YAAc,EAAKA,YAAYC,KAAjB,uJAPH,E,0MASNb,OACV,IAAMc,UAAY,aACZC,aAAe,OACfC,cAAgBd,KAAKQ,MAAMP,gBAAkBH,MAEnD,OAAOA,MAAMiB,eACX,IAAK,IACHf,KAAKgB,SAAS,CACZf,gBAAkB,GAClBC,OAAS,IAEX,MACF,IAAK,IACHF,KAAKgB,SAAS,CACZf,gBAAkBa,cAAcG,MAAM,EAAEH,cAAcI,OAAS,KAEjE,MACF,IAAK,IACH,IAAIL,aAAaM,KAAKL,eAAe,CACnCM,MAAM,gBACN,MAEFpB,KAAKgB,SAAS,CACZd,OAASmB,KAAKP,cAAcQ,QAAQV,UAAW,OAEjD,MAEF,QACEZ,KAAKgB,SAAS,CACZf,gBAAkBa,mB,+BAKxB,OACE,kEAAKlB,UAAU,cACX,2DAACG,OAAD,CAAQE,gBAAiBD,KAAKQ,MAAMP,gBAAiBC,OAAQF,KAAKQ,MAAMN,SACxE,2DAACG,UAAD,CAAWR,QAASG,KAAKU,mB,YA/CVP,6CAAMC,WAqD/BmB,iDAASC,OACL,2DAACjB,WAAD,MACFkB,SAASC,eAAe,W","file":"static/js/main.42937492.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Button(props){\n  return (\n  <button className=\"button\" onClick={props.onClick}> {props.value}</button>\n  )\n}\nclass Screen extends React.Component{\n  render(){\n    return (\n      <div className=\"screen\">\n        <h1>&zwnj;{this.props.beforeCalculate}</h1>\n        <span>= {this.props.result}</span> \n      </div>\n    )\n  }\n}\nclass ButtonPad extends React.Component{\n  renderButton (value) {\n    return (\n      <Button \n         value={value}\n         onClick={()=>this.props.onClick(value)}\n      />\n    )\n  }\n  render(){\n    return (\n      <div className=\"button-pad\">\n        <div className=\"col-1\">\n          <div className=\"operator-row\">\n            {this.renderButton(\"*\")}\n            {this.renderButton(\"/\")}\n            {this.renderButton(\"C\")}\n            {this.renderButton(\"<\")}\n          </div>\n          <div className=\"row-1\">\n            {this.renderButton(\"7\")}\n            {this.renderButton(\"8\")}\n            {this.renderButton(\"9\")}\n            {this.renderButton(\"-\")}\n          </div>\n          <div className=\"row-2\">\n            {this.renderButton(\"4\")}\n            {this.renderButton(\"5\")}\n            {this.renderButton(\"6\")}\n            {this.renderButton(\"+\")}\n          </div>\n          <div className=\"row-3\">\n            {this.renderButton(\"1\")}\n            {this.renderButton(\"2\")}    \n            {this.renderButton(\"3\")}\n            {this.renderButton(\"=\")}\n          </div>\n        </div>\n          <div className=\"col-2\">\n          </div>\n      </div>\n    )\n  }\n}\nclass Calculator extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      beforeCalculate : '',\n      isClear : false,\n      result : 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(value){\n    const mathRegex = /[^-\\d/*+]/g;\n    const mathEndRegex = /\\d=$/; \n    const currentNumber = this.state.beforeCalculate + value;\n\n    switch(value.toLowerCase()){\n      case \"c\":\n        this.setState({\n          beforeCalculate : '',\n          result : 0\n        });\n        break;\n      case \"<\":\n        this.setState({\n          beforeCalculate : currentNumber.slice(0,currentNumber.length - 2) \n        });\n        break;\n      case \"=\":\n        if(!mathEndRegex.test(currentNumber)){\n          alert(\"not complete\");\n          break;\n        }\n        this.setState({\n          result : eval(currentNumber.replace(mathRegex, '')),\n        })\n        break;\n\n      default:\n        this.setState({\n          beforeCalculate : currentNumber,\n        })\n    }\n  }\n  render(){\n    return (\n      <div className=\"calculator\">\n          <Screen beforeCalculate={this.state.beforeCalculate} result={this.state.result}/>\n          <ButtonPad onClick={this.handleClick}/>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n    <Calculator />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}